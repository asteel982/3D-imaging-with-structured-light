import cv2
import numpy as np
import matplotlib.pyplot as plt
import time
import tkinter as tk
from PIL import Image, ImageTk
import time
from mpl_toolkits.mplot3d import Axes3D
#%%
fringe = {}
frame = {}
for i in range(3):
    fringe[i] = cv2.imread(r'c:\Users\user\Desktop\Frame_tests\Mug45\Frame_'+str(i)+'.png')
    frame[i] = np.asarray(fringe[i])
    frame[i] = frame[i].astype(np.float32)
    frame[i] = np.sum(frame[i],axis=2)

depth = np.arctan2(np.sqrt(3)*(frame.get(0)-frame.get(2)),2*frame.get(1)-frame.get(0)-frame.get(2))
depth_uw = depth
x_sz = depth.shape[1]
y_sz = depth.shape[0]
fullimage = frame.get(0)+frame.get(1)+frame.get(2)


for i in range(x_sz):

    depth_uw[:,i] = np.unwrap(depth_uw[:,i])

   

for i in range(y_sz):

    depth_uw[i,:] = np.unwrap(depth_uw[i,:])
    
    
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
y = np.arange(0,y_sz,1)
x = np.arange(0,x_sz,1)
X, Y = np.meshgrid(x, y)
z = depth_uw.reshape(X.shape)
v1 = fullimage>850
v2 = z>-20
valid = v1*v2

chooseRow = 50 #Choose a row somewhere in the middle
difference = np.diff(valid[chooseRow,:]) # Take the points on that row which are valid
trasitionPosition = np.where(difference)[0] # Find the positions of transition in the valid
x1 = trasitionPosition[0] # First position (start of valid)
x2 = trasitionPosition[-1] # Last position (end of valid)
z1 = depth_uw[chooseRow,x1] # Depth at start
z2 = depth_uw[chooseRow,x2] # Depth at end
gradient = (z2-z1)/(x2-x1) # Slope gradient
intercept = z1-gradient*x1 # Slope intercept


t = np.zeros((1,x_sz))
for i in range(x_sz):
    t[0,i]=gradient*i+intercept # Make line with points

slope = np.matmul(np.ones((y_sz,1)),t)
z = z-slope

z = cv2.flip(z,1)
fullimage = cv2.flip(fullimage,1)

Z = z[valid]
X = X[valid]
Y = Y[valid]
colours = fullimage[valid]

ax.scatter(X,Y,Z,marker = '.', c = colours)
ax.set_xlabel('X Axes')
ax.set_ylabel('Y Axes')
ax.set_zlabel('Z Axes')
ax.view_init(elev=-90., azim=-90)


plt.show()
